function _toConsumableArray(e){return _arrayWithoutHoles(e)||_iterableToArray(e)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}function _iterableToArray(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}function _arrayWithoutHoles(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}!function(e,t){"use strict";e=e&&e.hasOwnProperty("default")?e.default:e,t=t&&t.hasOwnProperty("default")?t.default:t;"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self&&self;function n(e,t){return e(t={exports:{}},t.exports),t.exports}var r=1e3,i=60*r,o=60*i,s=24*o,a=7*s,c=365.25*s,h=function(e,t){t=t||{};var n=_typeof(e);if("string"===n&&e.length>0)return function(e){if((e=String(e)).length>100)return;var t=/^((?:\d+)?\-?\d?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);if(!t)return;var n=parseFloat(t[1]);switch((t[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return n*c;case"weeks":case"week":case"w":return n*a;case"days":case"day":case"d":return n*s;case"hours":case"hour":case"hrs":case"hr":case"h":return n*o;case"minutes":case"minute":case"mins":case"min":case"m":return n*i;case"seconds":case"second":case"secs":case"sec":case"s":return n*r;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return n;default:return}}(e);if("number"===n&&!1===isNaN(e))return t.long?function(e){var t=Math.abs(e);if(t>=s)return u(e,t,s,"day");if(t>=o)return u(e,t,o,"hour");if(t>=i)return u(e,t,i,"minute");if(t>=r)return u(e,t,r,"second");return e+" ms"}(e):function(e){var t=Math.abs(e);if(t>=s)return Math.round(e/s)+"d";if(t>=o)return Math.round(e/o)+"h";if(t>=i)return Math.round(e/i)+"m";if(t>=r)return Math.round(e/r)+"s";return e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))};function u(e,t,n,r){var i=t>=1.5*n;return Math.round(e/n)+" "+r+(i?"s":"")}var p=function(e){function t(e){for(var t=0,r=0;r<e.length;r++)t=(t<<5)-t+e.charCodeAt(r),t|=0;return n.colors[Math.abs(t)%n.colors.length]}function n(e){var o;function s(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];if(s.enabled){var i=s,a=Number(new Date),c=a-(o||a);i.diff=c,i.prev=o,i.curr=a,o=a,t[0]=n.coerce(t[0]),"string"!=typeof t[0]&&t.unshift("%O");var h=0;t[0]=t[0].replace(/%([a-zA-Z%])/g,function(e,r){if("%%"===e)return e;h++;var o=n.formatters[r];if("function"==typeof o){var s=t[h];e=o.call(i,s),t.splice(h,1),h--}return e}),n.formatArgs.call(i,t),(i.log||n.log).apply(i,t)}}return s.namespace=e,s.enabled=n.enabled(e),s.useColors=n.useColors(),s.color=t(e),s.destroy=r,s.extend=i,"function"==typeof n.init&&n.init(s),n.instances.push(s),s}function r(){var e=n.instances.indexOf(this);return-1!==e&&(n.instances.splice(e,1),!0)}function i(e,t){var r=n(this.namespace+(void 0===t?":":t)+e);return r.log=this.log,r}function o(e){return e.toString().substring(2,e.toString().length-2).replace(/\.\*\?$/,"*")}return n.debug=n,n.default=n,n.coerce=function(e){return e instanceof Error?e.stack||e.message:e},n.disable=function(){var e=[].concat(_toConsumableArray(n.names.map(o)),_toConsumableArray(n.skips.map(o).map(function(e){return"-"+e}))).join(",");return n.enable(""),e},n.enable=function(e){var t;n.save(e),n.names=[],n.skips=[];var r=("string"==typeof e?e:"").split(/[\s,]+/),i=r.length;for(t=0;t<i;t++)r[t]&&("-"===(e=r[t].replace(/\*/g,".*?"))[0]?n.skips.push(new RegExp("^"+e.substr(1)+"$")):n.names.push(new RegExp("^"+e+"$")));for(t=0;t<n.instances.length;t++){var o=n.instances[t];o.enabled=n.enabled(o.namespace)}},n.enabled=function(e){if("*"===e[e.length-1])return!0;var t,r;for(t=0,r=n.skips.length;t<r;t++)if(n.skips[t].test(e))return!1;for(t=0,r=n.names.length;t<r;t++)if(n.names[t].test(e))return!0;return!1},n.humanize=h,Object.keys(e).forEach(function(t){n[t]=e[t]}),n.instances=[],n.names=[],n.skips=[],n.formatters={},n.selectColor=t,n.enable(n.load()),n},l=n(function(e,t){t.log=function(){var e;return"object"===("undefined"==typeof console?"undefined":_typeof(console))&&console.log&&(e=console).log.apply(e,arguments)},t.formatArgs=function(t){if(t[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+t[0]+(this.useColors?"%c ":" ")+"+"+e.exports.humanize(this.diff),!this.useColors)return;var n="color: "+this.color;t.splice(1,0,n,"color: inherit");var r=0,i=0;t[0].replace(/%[a-zA-Z%]/g,function(e){"%%"!==e&&(r++,"%c"===e&&(i=r))}),t.splice(i,0,n)},t.save=function(e){try{e?t.storage.setItem("debug",e):t.storage.removeItem("debug")}catch(e){}},t.load=function(){var e;try{e=t.storage.getItem("debug")}catch(e){}!e&&"undefined"!=typeof process&&"env"in process&&(e=process.env.DEBUG);return e},t.useColors=function(){if("undefined"!=typeof window&&window.process&&("renderer"===window.process.type||window.process.__nwjs))return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},t.storage=function(){try{return localStorage}catch(e){}}(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],e.exports=p(t),e.exports.formatters.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}}});l.log,l.formatArgs,l.save,l.load,l.useColors,l.storage,l.colors,l("csl:log");l.disable();var f=n(function(e,t){e.exports=function(){var e=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)},t=d,n=a,r=function(e){return c(a(e))},i=c,o=f,s=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^()])+)\\))?|\\(((?:\\\\.|[^()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function a(e){for(var t,n=[],r=0,i=0,o="";null!=(t=s.exec(e));){var a=t[0],c=t[1],h=t.index;if(o+=e.slice(i,h),i=h+a.length,c)o+=c[1];else{o&&(n.push(o),o="");var p=t[2],l=t[3],f=t[4],d=t[5],g=t[6],m=t[7],C="+"===g||"*"===g,y="?"===g||"*"===g,v=p||"/",w=f||d||(m?".*":"[^"+v+"]+?");n.push({name:l||r++,prefix:p||"",delimiter:v,optional:y,repeat:C,pattern:u(w)})}}return i<e.length&&(o+=e.substr(i)),o&&n.push(o),n}function c(t){for(var n=new Array(t.length),r=0;r<t.length;r++)"object"===_typeof(t[r])&&(n[r]=new RegExp("^"+t[r].pattern+"$"));return function(r){for(var i="",o=r||{},s=0;s<t.length;s++){var a=t[s];if("string"!=typeof a){var c,h=o[a.name];if(null==h){if(a.optional)continue;throw new TypeError('Expected "'+a.name+'" to be defined')}if(e(h)){if(!a.repeat)throw new TypeError('Expected "'+a.name+'" to not repeat, but received "'+h+'"');if(0===h.length){if(a.optional)continue;throw new TypeError('Expected "'+a.name+'" to not be empty')}for(var u=0;u<h.length;u++){if(c=encodeURIComponent(h[u]),!n[s].test(c))throw new TypeError('Expected all "'+a.name+'" to match "'+a.pattern+'", but received "'+c+'"');i+=(0===u?a.prefix:a.delimiter)+c}}else{if(c=encodeURIComponent(h),!n[s].test(c))throw new TypeError('Expected "'+a.name+'" to match "'+a.pattern+'", but received "'+c+'"');i+=a.prefix+c}}else i+=a}return i}}function h(e){return e.replace(/([.+*?=^!:${}()[\]|\/])/g,"\\$1")}function u(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function p(e,t){return e.keys=t,e}function l(e){return e.sensitive?"":"i"}function f(e,t){for(var n=(t=t||{}).strict,r=!1!==t.end,i="",o=e[e.length-1],s="string"==typeof o&&/\/$/.test(o),a=0;a<e.length;a++){var c=e[a];if("string"==typeof c)i+=h(c);else{var u=h(c.prefix),p=c.pattern;c.repeat&&(p+="(?:"+u+p+")*"),p=c.optional?u?"(?:"+u+"("+p+"))?":"("+p+")?":u+"("+p+")",i+=p}}return n||(i=(s?i.slice(0,-2):i)+"(?:\\/(?=$))?"),i+=r?"$":n&&s?"":"(?=\\/|$)",new RegExp("^"+i,l(t))}function d(t,n,r){return e(n=n||[])?r||(r={}):(r=n,n=[]),t instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,pattern:null});return p(e,t)}(t,n):e(t)?function(e,t,n){for(var r=[],i=0;i<e.length;i++)r.push(d(e[i],t,n).source);return p(new RegExp("(?:"+r.join("|")+")",l(n)),t)}(t,n,r):function(e,t,n){for(var r=a(e),i=f(r,n),o=0;o<r.length;o++)"string"!=typeof r[o]&&t.push(r[o]);return p(i,t)}(t,n,r)}t.parse=n,t.compile=r,t.tokensToFunction=i,t.tokensToRegExp=o;var g,m="undefined"!=typeof document,C="undefined"!=typeof window,y="undefined"!=typeof history,v="undefined"!=typeof process,w=m&&document.ontouchstart?"touchstart":"click",b=C&&!(!window.history.location&&!window.location);function _(){this.callbacks=[],this.exits=[],this.current="",this.len=0,this._decodeURLComponents=!0,this._base="",this._strict=!1,this._running=!1,this._hashbang=!1,this.clickHandler=this.clickHandler.bind(this),this._onpopstate=this._onpopstate.bind(this)}function F(e,t){if("function"==typeof e)return F.call(this,"*",e);if("function"==typeof t)for(var n=new k(e,null,this),r=1;r<arguments.length;++r)this.callbacks.push(n.middleware(arguments[r]));else"string"==typeof e?this["string"==typeof t?"redirect":"show"](e,t):this.start(e)}function x(e,t,n){var r=this.page=n||F,i=r._window,o=r._hashbang,s=r._getBase();"/"===e[0]&&0!==e.indexOf(s)&&(e=s+(o?"#!":"")+e);var a=e.indexOf("?");if(this.canonicalPath=e,this.path=e.replace(s,"")||"/",o&&(this.path=this.path.replace("#!","")||"/"),this.title=m&&i.document.title,this.state=t||{},this.state.path=e,this.querystring=~a?r._decodeURLEncodedURIComponent(e.slice(a+1)):"",this.pathname=r._decodeURLEncodedURIComponent(~a?e.slice(0,a):e),this.params={},this.hash="",!o){if(!~this.path.indexOf("#"))return;var c=this.path.split("#");this.path=this.pathname=c[0],this.hash=r._decodeURLEncodedURIComponent(c[1])||"",this.querystring=this.querystring.split("#")[0]}}function k(e,n,r){this.page=r||E;var i=n||{};i.strict=i.strict||r._strict,this.path="*"===e?"(.*)":e,this.method="GET",this.regexp=t(this.path,this.keys=[],i)}_.prototype.configure=function(e){var t=e||{};this._window=t.window||C&&window,this._decodeURLComponents=!1!==t.decodeURLComponents,this._popstate=!1!==t.popstate&&C,this._click=!1!==t.click&&m,this._hashbang=!!t.hashbang;var n=this._window;this._popstate?n.addEventListener("popstate",this._onpopstate,!1):C&&n.removeEventListener("popstate",this._onpopstate,!1),this._click?n.document.addEventListener(w,this.clickHandler,!1):m&&n.document.removeEventListener(w,this.clickHandler,!1),this._hashbang&&C&&!y?n.addEventListener("hashchange",this._onpopstate,!1):C&&n.removeEventListener("hashchange",this._onpopstate,!1)},_.prototype.base=function(e){if(0===arguments.length)return this._base;this._base=e},_.prototype._getBase=function(){var e=this._base;if(e)return e;var t=C&&this._window&&this._window.location;return C&&this._hashbang&&t&&"file:"===t.protocol&&(e=t.pathname),e},_.prototype.strict=function(e){if(0===arguments.length)return this._strict;this._strict=e},_.prototype.start=function(e){var t=e||{};if(this.configure(t),!1!==t.dispatch){var n;if(this._running=!0,b){var r=this._window,i=r.location;n=this._hashbang&&~i.hash.indexOf("#!")?i.hash.substr(2)+i.search:this._hashbang?i.search+i.hash:i.pathname+i.search+i.hash}this.replace(n,null,!0,t.dispatch)}},_.prototype.stop=function(){if(this._running){this.current="",this.len=0,this._running=!1;var e=this._window;this._click&&e.document.removeEventListener(w,this.clickHandler,!1),C&&e.removeEventListener("popstate",this._onpopstate,!1),C&&e.removeEventListener("hashchange",this._onpopstate,!1)}},_.prototype.show=function(e,t,n,r){var i=new x(e,t,this),o=this.prevContext;return this.prevContext=i,this.current=i.path,!1!==n&&this.dispatch(i,o),!1!==i.handled&&!1!==r&&i.pushState(),i},_.prototype.back=function(e,t){var n=this;if(this.len>0){var r=this._window;y&&r.history.back(),this.len--}else e?setTimeout(function(){n.show(e,t)}):setTimeout(function(){n.show(n._getBase(),t)})},_.prototype.redirect=function(e,t){var n=this;"string"==typeof e&&"string"==typeof t&&F.call(this,e,function(e){setTimeout(function(){n.replace(t)},0)}),"string"==typeof e&&void 0===t&&setTimeout(function(){n.replace(e)},0)},_.prototype.replace=function(e,t,n,r){var i=new x(e,t,this),o=this.prevContext;return this.prevContext=i,this.current=i.path,i.init=n,i.save(),!1!==r&&this.dispatch(i,o),i},_.prototype.dispatch=function(e,t){var n=0,r=0,i=this;function o(){var t=i.callbacks[n++];if(e.path===i.current)return t?void t(e,o):function(e){if(!e.handled){var t=this._window;(this._hashbang?b&&this._getBase()+t.location.hash.replace("#!",""):b&&t.location.pathname+t.location.search)!==e.canonicalPath&&(this.stop(),e.handled=!1,b&&(t.location.href=e.canonicalPath))}}.call(i,e);e.handled=!1}t?function e(){var n=i.exits[r++];if(!n)return o();n(t,e)}():o()},_.prototype.exit=function(e,t){if("function"==typeof e)return this.exit("*",e);for(var n=new k(e,null,this),r=1;r<arguments.length;++r)this.exits.push(n.middleware(arguments[r]))},_.prototype.clickHandler=function(e){if(1===this._which(e)&&!(e.metaKey||e.ctrlKey||e.shiftKey||e.defaultPrevented)){var t=e.target,n=e.path||(e.composedPath?e.composedPath():null);if(n)for(var r=0;r<n.length;r++)if(n[r].nodeName&&"A"===n[r].nodeName.toUpperCase()&&n[r].href){t=n[r];break}for(;t&&"A"!==t.nodeName.toUpperCase();)t=t.parentNode;if(t&&"A"===t.nodeName.toUpperCase()){var i="object"===_typeof(t.href)&&"SVGAnimatedString"===t.href.constructor.name;if(!t.hasAttribute("download")&&"external"!==t.getAttribute("rel")){var o=t.getAttribute("href");if((this._hashbang||!this._samePath(t)||!t.hash&&"#"!==o)&&!(o&&o.indexOf("mailto:")>-1)&&(i?!t.target.baseVal:!t.target)&&(i||this.sameOrigin(t.href))){var s=i?t.href.baseVal:t.pathname+t.search+(t.hash||"");s="/"!==s[0]?"/"+s:s,v&&s.match(/^\/[a-zA-Z]:\//)&&(s=s.replace(/^\/[a-zA-Z]:\//,"/"));var a=s,c=this._getBase();0===s.indexOf(c)&&(s=s.substr(c.length)),this._hashbang&&(s=s.replace("#!","")),(!c||a!==s||b&&"file:"===this._window.location.protocol)&&(e.preventDefault(),this.show(a))}}}}},_.prototype._onpopstate=(g=!1,C?(m&&"complete"===document.readyState?g=!0:window.addEventListener("load",function(){setTimeout(function(){g=!0},0)}),function(e){if(g)if(e.state){var t=e.state.path;this.replace(t,e.state)}else if(b){var n=this._window.location;this.show(n.pathname+n.search+n.hash,void 0,void 0,!1)}}):function(){}),_.prototype._which=function(e){return null==(e=e||C&&this._window.event).which?e.button:e.which},_.prototype._toURL=function(e){var t=this._window;if("function"==typeof URL&&b)return new URL(e,t.location.toString());if(m){var n=t.document.createElement("a");return n.href=e,n}},_.prototype.sameOrigin=function(e){if(!e||!b)return!1;var t=this._toURL(e),n=this._window,r=n.location;return r.protocol===t.protocol&&r.hostname===t.hostname&&r.port===t.port},_.prototype._samePath=function(e){if(!b)return!1;var t=this._window,n=t.location;return e.pathname===n.pathname&&e.search===n.search},_.prototype._decodeURLEncodedURIComponent=function(e){return"string"!=typeof e?e:this._decodeURLComponents?decodeURIComponent(e.replace(/\+/g," ")):e},x.prototype.pushState=function(){var e=this.page,t=e._window,n=e._hashbang;e.len++,y&&t.history.pushState(this.state,this.title,n&&"/"!==this.path?"#!"+this.path:this.canonicalPath)},x.prototype.save=function(){var e=this.page;y&&"file:"!==e._window.location.protocol&&e._window.history.replaceState(this.state,this.title,e._hashbang&&"/"!==this.path?"#!"+this.path:this.canonicalPath)},k.prototype.middleware=function(e){var t=this;return function(n,r){if(t.match(n.path,n.params))return e(n,r);r()}},k.prototype.match=function(e,t){var n=this.keys,r=e.indexOf("?"),i=~r?e.slice(0,r):e,o=this.regexp.exec(decodeURIComponent(i));if(!o)return!1;for(var s=1,a=o.length;s<a;++s){var c=n[s-1],h=this.page._decodeURLEncodedURIComponent(o[s]);void 0===h&&hasOwnProperty.call(t,c.name)||(t[c.name]=h)}return!0};var E=function e(){var t=new _;function n(){return F.apply(t,arguments)}return n.callbacks=t.callbacks,n.exits=t.exits,n.base=t.base.bind(t),n.strict=t.strict.bind(t),n.start=t.start.bind(t),n.stop=t.stop.bind(t),n.show=t.show.bind(t),n.back=t.back.bind(t),n.redirect=t.redirect.bind(t),n.replace=t.replace.bind(t),n.dispatch=t.dispatch.bind(t),n.exit=t.exit.bind(t),n.configure=t.configure.bind(t),n.sameOrigin=t.sameOrigin.bind(t),n.clickHandler=t.clickHandler.bind(t),n.create=e,Object.defineProperty(n,"len",{get:function(){return t.len},set:function(e){t.len=e}}),Object.defineProperty(n,"current",{get:function(){return t.current},set:function(e){t.current=e}}),n.Context=x,n.Route=k,n}(),A=E,R=E;return A.default=R,A}()});var d="Юрий Кагарлицкий, кандидат филологических наук, старший научный сотрудник Института русского языка им. В.В.Виноградова РАН",g="Ольга Седакова, кандидат филологических наук, старший научный сотрудник Института истории мировой культуры МГУ",m="Александра Плетнева, кандидат филологических наук, старший научный сотрудник Института русского языка им. В.В.Виноградова РАН",C="Максим Плякин, священник, клирик Саратовской епархии",y="Анна Пичхадзе, доктор филологических наук, главный научный сотрудник Института русского языка им. В.В.Виноградова РАН",v=[{id:"WN6ZgruS5Qc",title:"Древнейшие переводы с греческого языка на церковнославянский",speaker:y,legend:""},{id:"BZn5wLp_BsI",title:"Церковнославянская лексика: ошибки понимания",speaker:g,legend:""},{id:"W3-hs6062WI",title:"Азбучная реформа Петра I",speaker:d,legend:""},{id:"1xAHu2Bo5_M",title:"Церковнославянская грамотность XVIII–XIX веков",speaker:m,legend:""},{id:"WEawhCf-9VA",title:"Поэтика богослужебных песнопений",speaker:g,legend:""},{id:"2i4nee62Vx4",title:"Церковные службы, написанные в новейшее время",speaker:C,legend:""},{id:"33fLDQMBHzo",title:"Лубочная письменность и церковнославянский язык",speaker:m,legend:""},{id:"h11RhKwWLQk",title:"Гимнографическое творчество в СССР, Зарубежье и постсоветской России",speaker:C,legend:""},{id:"TPs3NSVdsD8",title:"Службы неканонизированным историческим личностям",speaker:C,legend:""},{id:"2QCEzrR0znI",title:"Лексика древнерусской разновидности церковнославянского языка",speaker:y,legend:""},{id:"HFW-qowkNtY",title:"Простой русский или книжный славянский?",speaker:d,legend:""},{id:"ZTHAepS2EcQ",title:"Кто прав: Н.М.Карамзин или А.С.Шишков?",speaker:d,legend:""}],w=window.URLSearchParams&&new URLSearchParams(document.location.search);window[";)"]={debug:w&&w.has("debug")||!1};var b=new function(){this.debug=window[";)"].debug,this.section=t.observable(),this.indexIsOn=t.observable(!1),this.videos=v};!function(e,t){e.applyBindings(t)}(t,b);f("/",function(){b.section(null)}),f("/видео",function(){b.section("video")}),f("*","/"),f({hashbang:!0}),e("#safetyCurtain").fadeOut()}(jQuery,ko);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,