!function(t,e){"use strict";t=t&&t.hasOwnProperty("default")?t.default:t,e=e&&e.hasOwnProperty("default")?e.default:e;"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self&&self;function n(t,e){return t(e={exports:{}},e.exports),e.exports}var r=1e3,i=60*r,o=60*i,s=24*o,a=7*s,c=365.25*s,h=function(t,e){e=e||{};var n=typeof t;if("string"===n&&t.length>0)return function(t){if((t=String(t)).length>100)return;var e=/^((?:\d+)?\-?\d?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(t);if(!e)return;var n=parseFloat(e[1]);switch((e[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return n*c;case"weeks":case"week":case"w":return n*a;case"days":case"day":case"d":return n*s;case"hours":case"hour":case"hrs":case"hr":case"h":return n*o;case"minutes":case"minute":case"mins":case"min":case"m":return n*i;case"seconds":case"second":case"secs":case"sec":case"s":return n*r;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return n;default:return}}(t);if("number"===n&&!1===isNaN(t))return e.long?function(t){var e=Math.abs(t);if(e>=s)return u(t,e,s,"day");if(e>=o)return u(t,e,o,"hour");if(e>=i)return u(t,e,i,"minute");if(e>=r)return u(t,e,r,"second");return t+" ms"}(t):function(t){var e=Math.abs(t);if(e>=s)return Math.round(t/s)+"d";if(e>=o)return Math.round(t/o)+"h";if(e>=i)return Math.round(t/i)+"m";if(e>=r)return Math.round(t/r)+"s";return t+"ms"}(t);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(t))};function u(t,e,n,r){var i=e>=1.5*n;return Math.round(t/n)+" "+r+(i?"s":"")}var p=function(t){function e(t){let e=0;for(let n=0;n<t.length;n++)e=(e<<5)-e+t.charCodeAt(n),e|=0;return n.colors[Math.abs(e)%n.colors.length]}function n(t){let o;function s(...t){if(!s.enabled)return;const e=s,r=Number(new Date),i=r-(o||r);e.diff=i,e.prev=o,e.curr=r,o=r,t[0]=n.coerce(t[0]),"string"!=typeof t[0]&&t.unshift("%O");let a=0;t[0]=t[0].replace(/%([a-zA-Z%])/g,(r,i)=>{if("%%"===r)return r;a++;const o=n.formatters[i];if("function"==typeof o){const n=t[a];r=o.call(e,n),t.splice(a,1),a--}return r}),n.formatArgs.call(e,t),(e.log||n.log).apply(e,t)}return s.namespace=t,s.enabled=n.enabled(t),s.useColors=n.useColors(),s.color=e(t),s.destroy=r,s.extend=i,"function"==typeof n.init&&n.init(s),n.instances.push(s),s}function r(){const t=n.instances.indexOf(this);return-1!==t&&(n.instances.splice(t,1),!0)}function i(t,e){const r=n(this.namespace+(void 0===e?":":e)+t);return r.log=this.log,r}function o(t){return t.toString().substring(2,t.toString().length-2).replace(/\.\*\?$/,"*")}return n.debug=n,n.default=n,n.coerce=function(t){return t instanceof Error?t.stack||t.message:t},n.disable=function(){const t=[...n.names.map(o),...n.skips.map(o).map(t=>"-"+t)].join(",");return n.enable(""),t},n.enable=function(t){let e;n.save(t),n.names=[],n.skips=[];const r=("string"==typeof t?t:"").split(/[\s,]+/),i=r.length;for(e=0;e<i;e++)r[e]&&("-"===(t=r[e].replace(/\*/g,".*?"))[0]?n.skips.push(new RegExp("^"+t.substr(1)+"$")):n.names.push(new RegExp("^"+t+"$")));for(e=0;e<n.instances.length;e++){const t=n.instances[e];t.enabled=n.enabled(t.namespace)}},n.enabled=function(t){if("*"===t[t.length-1])return!0;let e,r;for(e=0,r=n.skips.length;e<r;e++)if(n.skips[e].test(t))return!1;for(e=0,r=n.names.length;e<r;e++)if(n.names[e].test(t))return!0;return!1},n.humanize=h,Object.keys(t).forEach(e=>{n[e]=t[e]}),n.instances=[],n.names=[],n.skips=[],n.formatters={},n.selectColor=e,n.enable(n.load()),n},f=n(function(t,e){e.log=function(...t){return"object"==typeof console&&console.log&&console.log(...t)},e.formatArgs=function(e){if(e[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+e[0]+(this.useColors?"%c ":" ")+"+"+t.exports.humanize(this.diff),!this.useColors)return;const n="color: "+this.color;e.splice(1,0,n,"color: inherit");let r=0,i=0;e[0].replace(/%[a-zA-Z%]/g,t=>{"%%"!==t&&(r++,"%c"===t&&(i=r))}),e.splice(i,0,n)},e.save=function(t){try{t?e.storage.setItem("debug",t):e.storage.removeItem("debug")}catch(t){}},e.load=function(){let t;try{t=e.storage.getItem("debug")}catch(t){}!t&&"undefined"!=typeof process&&"env"in process&&(t=process.env.DEBUG);return t},e.useColors=function(){if("undefined"!=typeof window&&window.process&&("renderer"===window.process.type||window.process.__nwjs))return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},e.storage=function(){try{return localStorage}catch(t){}}(),e.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.exports=p(e);const{formatters:n}=t.exports;n.j=function(t){try{return JSON.stringify(t)}catch(t){return"[UnexpectedJSONParseError]: "+t.message}}}),l=(f.log,f.formatArgs,f.save,f.load,f.useColors,f.storage,f.colors,f("csl:log"));f.disable();var d=n(function(t,e){t.exports=function(){var t=Array.isArray||function(t){return"[object Array]"==Object.prototype.toString.call(t)},e=d,n=a,r=function(t){return c(a(t))},i=c,o=l,s=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^()])+)\\))?|\\(((?:\\\\.|[^()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function a(t){for(var e,n=[],r=0,i=0,o="";null!=(e=s.exec(t));){var a=e[0],c=e[1],h=e.index;if(o+=t.slice(i,h),i=h+a.length,c)o+=c[1];else{o&&(n.push(o),o="");var p=e[2],f=e[3],l=e[4],d=e[5],g=e[6],m=e[7],C="+"===g||"*"===g,w="?"===g||"*"===g,v=p||"/",y=l||d||(m?".*":"[^"+v+"]+?");n.push({name:f||r++,prefix:p||"",delimiter:v,optional:w,repeat:C,pattern:u(y)})}}return i<t.length&&(o+=t.substr(i)),o&&n.push(o),n}function c(e){for(var n=new Array(e.length),r=0;r<e.length;r++)"object"==typeof e[r]&&(n[r]=new RegExp("^"+e[r].pattern+"$"));return function(r){for(var i="",o=r||{},s=0;s<e.length;s++){var a=e[s];if("string"!=typeof a){var c,h=o[a.name];if(null==h){if(a.optional)continue;throw new TypeError('Expected "'+a.name+'" to be defined')}if(t(h)){if(!a.repeat)throw new TypeError('Expected "'+a.name+'" to not repeat, but received "'+h+'"');if(0===h.length){if(a.optional)continue;throw new TypeError('Expected "'+a.name+'" to not be empty')}for(var u=0;u<h.length;u++){if(c=encodeURIComponent(h[u]),!n[s].test(c))throw new TypeError('Expected all "'+a.name+'" to match "'+a.pattern+'", but received "'+c+'"');i+=(0===u?a.prefix:a.delimiter)+c}}else{if(c=encodeURIComponent(h),!n[s].test(c))throw new TypeError('Expected "'+a.name+'" to match "'+a.pattern+'", but received "'+c+'"');i+=a.prefix+c}}else i+=a}return i}}function h(t){return t.replace(/([.+*?=^!:${}()[\]|\/])/g,"\\$1")}function u(t){return t.replace(/([=!:$\/()])/g,"\\$1")}function p(t,e){return t.keys=e,t}function f(t){return t.sensitive?"":"i"}function l(t,e){for(var n=(e=e||{}).strict,r=!1!==e.end,i="",o=t[t.length-1],s="string"==typeof o&&/\/$/.test(o),a=0;a<t.length;a++){var c=t[a];if("string"==typeof c)i+=h(c);else{var u=h(c.prefix),p=c.pattern;c.repeat&&(p+="(?:"+u+p+")*"),p=c.optional?u?"(?:"+u+"("+p+"))?":"("+p+")?":u+"("+p+")",i+=p}}return n||(i=(s?i.slice(0,-2):i)+"(?:\\/(?=$))?"),i+=r?"$":n&&s?"":"(?=\\/|$)",new RegExp("^"+i,f(e))}function d(e,n,r){return t(n=n||[])?r||(r={}):(r=n,n=[]),e instanceof RegExp?function(t,e){var n=t.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)e.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,pattern:null});return p(t,e)}(e,n):t(e)?function(t,e,n){for(var r=[],i=0;i<t.length;i++)r.push(d(t[i],e,n).source);return p(new RegExp("(?:"+r.join("|")+")",f(n)),e)}(e,n,r):function(t,e,n){for(var r=a(t),i=l(r,n),o=0;o<r.length;o++)"string"!=typeof r[o]&&e.push(r[o]);return p(i,e)}(e,n,r)}e.parse=n,e.compile=r,e.tokensToFunction=i,e.tokensToRegExp=o;var g,m="undefined"!=typeof document,C="undefined"!=typeof window,w="undefined"!=typeof history,v="undefined"!=typeof process,y=m&&document.ontouchstart?"touchstart":"click",b=C&&!(!window.history.location&&!window.location);function _(){this.callbacks=[],this.exits=[],this.current="",this.len=0,this._decodeURLComponents=!0,this._base="",this._strict=!1,this._running=!1,this._hashbang=!1,this.clickHandler=this.clickHandler.bind(this),this._onpopstate=this._onpopstate.bind(this)}function F(t,e){if("function"==typeof t)return F.call(this,"*",t);if("function"==typeof e)for(var n=new k(t,null,this),r=1;r<arguments.length;++r)this.callbacks.push(n.middleware(arguments[r]));else"string"==typeof t?this["string"==typeof e?"redirect":"show"](t,e):this.start(t)}function x(t,e,n){var r=this.page=n||F,i=r._window,o=r._hashbang,s=r._getBase();"/"===t[0]&&0!==t.indexOf(s)&&(t=s+(o?"#!":"")+t);var a=t.indexOf("?");if(this.canonicalPath=t,this.path=t.replace(s,"")||"/",o&&(this.path=this.path.replace("#!","")||"/"),this.title=m&&i.document.title,this.state=e||{},this.state.path=t,this.querystring=~a?r._decodeURLEncodedURIComponent(t.slice(a+1)):"",this.pathname=r._decodeURLEncodedURIComponent(~a?t.slice(0,a):t),this.params={},this.hash="",!o){if(!~this.path.indexOf("#"))return;var c=this.path.split("#");this.path=this.pathname=c[0],this.hash=r._decodeURLEncodedURIComponent(c[1])||"",this.querystring=this.querystring.split("#")[0]}}function k(t,n,r){this.page=r||E;var i=n||{};i.strict=i.strict||r._strict,this.path="*"===t?"(.*)":t,this.method="GET",this.regexp=e(this.path,this.keys=[],i)}_.prototype.configure=function(t){var e=t||{};this._window=e.window||C&&window,this._decodeURLComponents=!1!==e.decodeURLComponents,this._popstate=!1!==e.popstate&&C,this._click=!1!==e.click&&m,this._hashbang=!!e.hashbang;var n=this._window;this._popstate?n.addEventListener("popstate",this._onpopstate,!1):C&&n.removeEventListener("popstate",this._onpopstate,!1),this._click?n.document.addEventListener(y,this.clickHandler,!1):m&&n.document.removeEventListener(y,this.clickHandler,!1),this._hashbang&&C&&!w?n.addEventListener("hashchange",this._onpopstate,!1):C&&n.removeEventListener("hashchange",this._onpopstate,!1)},_.prototype.base=function(t){if(0===arguments.length)return this._base;this._base=t},_.prototype._getBase=function(){var t=this._base;if(t)return t;var e=C&&this._window&&this._window.location;return C&&this._hashbang&&e&&"file:"===e.protocol&&(t=e.pathname),t},_.prototype.strict=function(t){if(0===arguments.length)return this._strict;this._strict=t},_.prototype.start=function(t){var e=t||{};if(this.configure(e),!1!==e.dispatch){var n;if(this._running=!0,b){var r=this._window,i=r.location;n=this._hashbang&&~i.hash.indexOf("#!")?i.hash.substr(2)+i.search:this._hashbang?i.search+i.hash:i.pathname+i.search+i.hash}this.replace(n,null,!0,e.dispatch)}},_.prototype.stop=function(){if(this._running){this.current="",this.len=0,this._running=!1;var t=this._window;this._click&&t.document.removeEventListener(y,this.clickHandler,!1),C&&t.removeEventListener("popstate",this._onpopstate,!1),C&&t.removeEventListener("hashchange",this._onpopstate,!1)}},_.prototype.show=function(t,e,n,r){var i=new x(t,e,this),o=this.prevContext;return this.prevContext=i,this.current=i.path,!1!==n&&this.dispatch(i,o),!1!==i.handled&&!1!==r&&i.pushState(),i},_.prototype.back=function(t,e){var n=this;if(this.len>0){var r=this._window;w&&r.history.back(),this.len--}else t?setTimeout(function(){n.show(t,e)}):setTimeout(function(){n.show(n._getBase(),e)})},_.prototype.redirect=function(t,e){var n=this;"string"==typeof t&&"string"==typeof e&&F.call(this,t,function(t){setTimeout(function(){n.replace(e)},0)}),"string"==typeof t&&void 0===e&&setTimeout(function(){n.replace(t)},0)},_.prototype.replace=function(t,e,n,r){var i=new x(t,e,this),o=this.prevContext;return this.prevContext=i,this.current=i.path,i.init=n,i.save(),!1!==r&&this.dispatch(i,o),i},_.prototype.dispatch=function(t,e){var n=0,r=0,i=this;function o(){var e=i.callbacks[n++];if(t.path===i.current)return e?void e(t,o):function(t){if(!t.handled){var e=this._window;(this._hashbang?b&&this._getBase()+e.location.hash.replace("#!",""):b&&e.location.pathname+e.location.search)!==t.canonicalPath&&(this.stop(),t.handled=!1,b&&(e.location.href=t.canonicalPath))}}.call(i,t);t.handled=!1}e?function t(){var n=i.exits[r++];if(!n)return o();n(e,t)}():o()},_.prototype.exit=function(t,e){if("function"==typeof t)return this.exit("*",t);for(var n=new k(t,null,this),r=1;r<arguments.length;++r)this.exits.push(n.middleware(arguments[r]))},_.prototype.clickHandler=function(t){if(1===this._which(t)&&!(t.metaKey||t.ctrlKey||t.shiftKey||t.defaultPrevented)){var e=t.target,n=t.path||(t.composedPath?t.composedPath():null);if(n)for(var r=0;r<n.length;r++)if(n[r].nodeName&&"A"===n[r].nodeName.toUpperCase()&&n[r].href){e=n[r];break}for(;e&&"A"!==e.nodeName.toUpperCase();)e=e.parentNode;if(e&&"A"===e.nodeName.toUpperCase()){var i="object"==typeof e.href&&"SVGAnimatedString"===e.href.constructor.name;if(!e.hasAttribute("download")&&"external"!==e.getAttribute("rel")){var o=e.getAttribute("href");if((this._hashbang||!this._samePath(e)||!e.hash&&"#"!==o)&&!(o&&o.indexOf("mailto:")>-1)&&(i?!e.target.baseVal:!e.target)&&(i||this.sameOrigin(e.href))){var s=i?e.href.baseVal:e.pathname+e.search+(e.hash||"");s="/"!==s[0]?"/"+s:s,v&&s.match(/^\/[a-zA-Z]:\//)&&(s=s.replace(/^\/[a-zA-Z]:\//,"/"));var a=s,c=this._getBase();0===s.indexOf(c)&&(s=s.substr(c.length)),this._hashbang&&(s=s.replace("#!","")),(!c||a!==s||b&&"file:"===this._window.location.protocol)&&(t.preventDefault(),this.show(a))}}}}},_.prototype._onpopstate=(g=!1,C?(m&&"complete"===document.readyState?g=!0:window.addEventListener("load",function(){setTimeout(function(){g=!0},0)}),function(t){if(g)if(t.state){var e=t.state.path;this.replace(e,t.state)}else if(b){var n=this._window.location;this.show(n.pathname+n.search+n.hash,void 0,void 0,!1)}}):function(){}),_.prototype._which=function(t){return null==(t=t||C&&this._window.event).which?t.button:t.which},_.prototype._toURL=function(t){var e=this._window;if("function"==typeof URL&&b)return new URL(t,e.location.toString());if(m){var n=e.document.createElement("a");return n.href=t,n}},_.prototype.sameOrigin=function(t){if(!t||!b)return!1;var e=this._toURL(t),n=this._window,r=n.location;return r.protocol===e.protocol&&r.hostname===e.hostname&&r.port===e.port},_.prototype._samePath=function(t){if(!b)return!1;var e=this._window,n=e.location;return t.pathname===n.pathname&&t.search===n.search},_.prototype._decodeURLEncodedURIComponent=function(t){return"string"!=typeof t?t:this._decodeURLComponents?decodeURIComponent(t.replace(/\+/g," ")):t},x.prototype.pushState=function(){var t=this.page,e=t._window,n=t._hashbang;t.len++,w&&e.history.pushState(this.state,this.title,n&&"/"!==this.path?"#!"+this.path:this.canonicalPath)},x.prototype.save=function(){var t=this.page;w&&"file:"!==t._window.location.protocol&&t._window.history.replaceState(this.state,this.title,t._hashbang&&"/"!==this.path?"#!"+this.path:this.canonicalPath)},k.prototype.middleware=function(t){var e=this;return function(n,r){if(e.match(n.path,n.params))return t(n,r);r()}},k.prototype.match=function(t,e){var n=this.keys,r=t.indexOf("?"),i=~r?t.slice(0,r):t,o=this.regexp.exec(decodeURIComponent(i));if(!o)return!1;for(var s=1,a=o.length;s<a;++s){var c=n[s-1],h=this.page._decodeURLEncodedURIComponent(o[s]);void 0===h&&hasOwnProperty.call(e,c.name)||(e[c.name]=h)}return!0};var E=function t(){var e=new _;function n(){return F.apply(e,arguments)}return n.callbacks=e.callbacks,n.exits=e.exits,n.base=e.base.bind(e),n.strict=e.strict.bind(e),n.start=e.start.bind(e),n.stop=e.stop.bind(e),n.show=e.show.bind(e),n.back=e.back.bind(e),n.redirect=e.redirect.bind(e),n.replace=e.replace.bind(e),n.dispatch=e.dispatch.bind(e),n.exit=e.exit.bind(e),n.configure=e.configure.bind(e),n.sameOrigin=e.sameOrigin.bind(e),n.clickHandler=e.clickHandler.bind(e),n.create=t,Object.defineProperty(n,"len",{get:function(){return e.len},set:function(t){e.len=t}}),Object.defineProperty(n,"current",{get:function(){return e.current},set:function(t){e.current=t}}),n.Context=x,n.Route=k,n}(),R=E,L=E;return R.default=L,R}()});var g=window.URLSearchParams&&new URLSearchParams(document.location.search);window[";)"]={debug:g&&g.has("debug")||!1};var m=new function(){this.version="v0.8.5",this.debug=window[";)"].debug,this.section=e.observable(),this.section.subscribe(l)};!function(t,e){t.applyBindings(e)}(e,m);l("page routes adjustment"),d("/",function(){m.section(null)}),d("/dictionary",function(){m.section("dictionary")}),d("/dictionary/about",function(){l("about dictionary url")}),d("/video",function(){m.section("video")}),d("/refs",function(){m.section("refs")}),d("/feedback",function(){m.section("feedback")}),d("*","/"),d({hashbang:!0}),t("#safetyCurtain").fadeOut()}(jQuery,ko);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
